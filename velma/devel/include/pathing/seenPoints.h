// Generated by gencpp from file pathing/seenPoints.msg
// DO NOT EDIT!


#ifndef PATHING_MESSAGE_SEENPOINTS_H
#define PATHING_MESSAGE_SEENPOINTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pathing
{
template <class ContainerAllocator>
struct seenPoints_
{
  typedef seenPoints_<ContainerAllocator> Type;

  seenPoints_()
    : indices()
    , confidences()  {
    }
  seenPoints_(const ContainerAllocator& _alloc)
    : indices(_alloc)
    , confidences(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _indices_type;
  _indices_type indices;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _confidences_type;
  _confidences_type confidences;





  typedef boost::shared_ptr< ::pathing::seenPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pathing::seenPoints_<ContainerAllocator> const> ConstPtr;

}; // struct seenPoints_

typedef ::pathing::seenPoints_<std::allocator<void> > seenPoints;

typedef boost::shared_ptr< ::pathing::seenPoints > seenPointsPtr;
typedef boost::shared_ptr< ::pathing::seenPoints const> seenPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pathing::seenPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pathing::seenPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pathing::seenPoints_<ContainerAllocator1> & lhs, const ::pathing::seenPoints_<ContainerAllocator2> & rhs)
{
  return lhs.indices == rhs.indices &&
    lhs.confidences == rhs.confidences;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pathing::seenPoints_<ContainerAllocator1> & lhs, const ::pathing::seenPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pathing

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pathing::seenPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pathing::seenPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pathing::seenPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pathing::seenPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathing::seenPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pathing::seenPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pathing::seenPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a1650ba81512ff9c6b2cf12c61879bc5";
  }

  static const char* value(const ::pathing::seenPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa1650ba81512ff9cULL;
  static const uint64_t static_value2 = 0x6b2cf12c61879bc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::pathing::seenPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pathing/seenPoints";
  }

  static const char* value(const ::pathing::seenPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pathing::seenPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] indices\n"
"float64[] confidences\n"
;
  }

  static const char* value(const ::pathing::seenPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pathing::seenPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.indices);
      stream.next(m.confidences);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct seenPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pathing::seenPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pathing::seenPoints_<ContainerAllocator>& v)
  {
    s << indent << "indices[]" << std::endl;
    for (size_t i = 0; i < v.indices.size(); ++i)
    {
      s << indent << "  indices[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.indices[i]);
    }
    s << indent << "confidences[]" << std::endl;
    for (size_t i = 0; i < v.confidences.size(); ++i)
    {
      s << indent << "  confidences[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.confidences[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATHING_MESSAGE_SEENPOINTS_H
