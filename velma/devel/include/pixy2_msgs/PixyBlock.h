// Generated by gencpp from file pixy2_msgs/PixyBlock.msg
// DO NOT EDIT!


#ifndef PIXY2_MSGS_MESSAGE_PIXYBLOCK_H
#define PIXY2_MSGS_MESSAGE_PIXYBLOCK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/RegionOfInterest.h>

namespace pixy2_msgs
{
template <class ContainerAllocator>
struct PixyBlock_
{
  typedef PixyBlock_<ContainerAllocator> Type;

  PixyBlock_()
    : type(0)
    , signature(0)
    , roi()
    , angle(0.0)
    , index(0)
    , age(0)  {
    }
  PixyBlock_(const ContainerAllocator& _alloc)
    : type(0)
    , signature(0)
    , roi(_alloc)
    , angle(0.0)
    , index(0)
    , age(0)  {
  (void)_alloc;
    }



   typedef uint16_t _type_type;
  _type_type type;

   typedef uint16_t _signature_type;
  _signature_type signature;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _roi_type;
  _roi_type roi;

   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _index_type;
  _index_type index;

   typedef uint8_t _age_type;
  _age_type age;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL_SIGNATURE)
  #undef NORMAL_SIGNATURE
#endif
#if defined(_WIN32) && defined(COLOR_CODE)
  #undef COLOR_CODE
#endif

  enum {
    NORMAL_SIGNATURE = 0u,
    COLOR_CODE = 1u,
  };


  typedef boost::shared_ptr< ::pixy2_msgs::PixyBlock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pixy2_msgs::PixyBlock_<ContainerAllocator> const> ConstPtr;

}; // struct PixyBlock_

typedef ::pixy2_msgs::PixyBlock_<std::allocator<void> > PixyBlock;

typedef boost::shared_ptr< ::pixy2_msgs::PixyBlock > PixyBlockPtr;
typedef boost::shared_ptr< ::pixy2_msgs::PixyBlock const> PixyBlockConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pixy2_msgs::PixyBlock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pixy2_msgs::PixyBlock_<ContainerAllocator1> & lhs, const ::pixy2_msgs::PixyBlock_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.signature == rhs.signature &&
    lhs.roi == rhs.roi &&
    lhs.angle == rhs.angle &&
    lhs.index == rhs.index &&
    lhs.age == rhs.age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pixy2_msgs::PixyBlock_<ContainerAllocator1> & lhs, const ::pixy2_msgs::PixyBlock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pixy2_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pixy2_msgs::PixyBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pixy2_msgs::PixyBlock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pixy2_msgs::PixyBlock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09dff5e34790a778002d631c87d0ce7d";
  }

  static const char* value(const ::pixy2_msgs::PixyBlock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09dff5e34790a778ULL;
  static const uint64_t static_value2 = 0x002d631c87d0ce7dULL;
};

template<class ContainerAllocator>
struct DataType< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pixy2_msgs/PixyBlock";
  }

  static const char* value(const ::pixy2_msgs::PixyBlock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# signiture types\n"
"uint16 NORMAL_SIGNATURE=0\n"
"uint16 COLOR_CODE=1\n"
"\n"
"# the message.  if type==0, then angle should be ignored.\n"
"uint16 type\n"
"uint16 signature\n"
"sensor_msgs/RegionOfInterest roi\n"
"float32 angle # in radians\n"
"uint8 index # Block index\n"
"uint8 age # Number of frames that this block has existed for\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::pixy2_msgs::PixyBlock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.signature);
      stream.next(m.roi);
      stream.next(m.angle);
      stream.next(m.index);
      stream.next(m.age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PixyBlock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pixy2_msgs::PixyBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pixy2_msgs::PixyBlock_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "signature: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.signature);
    s << indent << "roi: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.roi);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PIXY2_MSGS_MESSAGE_PIXYBLOCK_H
